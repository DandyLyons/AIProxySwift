//
//  OpenAIImageCodables.swift
//
//
//  Created by Lou Zell on 7/15/24.
//

import Foundation

// MARK: - Create Image
//
// The models below are derived from the 'Create Image' section of the OpenAI API reference:
// https://platform.openai.com/docs/api-reference/images/create

public struct OpenAICreateImageRequestBody: Encodable {
    // Required
    /// A text description of the desired image(s). The maximum length is 1000 characters for dall-e-2 and 4000 characters for dall-e-3.
    public let prompt: String

    // Optional
    /// The model to use for image generation. Supports `dall-e-2` and `dall-e-3`
    /// Defaults to `dall-e-2`
    public let model: String?

    /// The number of images to generate. Must be between 1 and 10. For dall-e-3, only n=1 is supported.
    /// Defaults to `1`
    public let n: Int?

    /// The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image.
    /// This param is only supported for `dall-e-3`
    /// Defaults to `standard`
    public let quality: String?

    /// The format in which the generated images are returned. Must be one of `url` or `b64_json`.
    /// URLs are only valid for 60 minutes after the image has been generated.
    /// Defaults to `url`
    public let responseFormat: String?

    /// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for dall-e-2. Must be
    /// one of `1024x1024`, `1792x1024`, or `1024x1792` for dall-e-3 models.
    /// Defaults to `1024x1024`
    public let size: String?

    /// The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards
    /// generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.
    /// This param is only supported for dall-e-3.
    /// Defaults to `vivid`
    public let style: String?

    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
    public let user: String?

    enum CodingKeys: String, CodingKey {
        case prompt
        case model
        case n
        case quality
        case responseFormat = "response_format"
        case size
        case style
        case user
    }

    // This memberwise initializer is autogenerated.
    // To regenerate, use `cmd-shift-a` > Generate Memberwise Initializer
    // To format, place the cursor in the initializer's parameter list and use `ctrl-m`
    public init(
        prompt: String,
        model: String? = nil,
        n: Int? = nil,
        quality: String? = nil,
        responseFormat: String? = nil,
        size: String? = nil,
        style: String? = nil,
        user: String? = nil
    ) {
        self.prompt = prompt
        self.model = model
        self.n = n
        self.quality = quality
        self.responseFormat = responseFormat
        self.size = size
        self.style = style
        self.user = user
    }
}


public struct OpenAICreateImageResponseBody: Decodable {
    /// A list of generated images returned from the 'Create Image' endpoint
    public let data: [OpenAIGeneratedImageData]
}

public struct OpenAIGeneratedImageData: Decodable {
    /// The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
    public let b64JSON: String?

    /// The URL of the generated image, if response_format is url (default).
    public let url: URL?

    /// The prompt that was used to generate the image, if there was any revision to the prompt.
    public let revisedPrompt: String?

    enum CodingKeys: String, CodingKey {
        case b64JSON = "b64_json"
        case url
        case revisedPrompt = "revised_prompt"
    }
}
